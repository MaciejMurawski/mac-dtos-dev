parameters:
  - name: SERVICE_CONNECTION
    displayName: Environment Service Connection
    type: string
    default: fed-mac-dtos
  - name: ENVIRONMENT
    displayName: Environment
    type: string
    default: dev
  - name: TF_VERSION
    displayName: Terraform Version
    type: string
    default: 1.5.7
  - name: TF_DIRECTORY
    displayName: Directory with Terraform Code
    type: string
    default: '$(System.DefaultWorkingDirectory)/infrastructure'

trigger: none

variables:
  - group: dtos_dev_variables

pool:
  vmImage: ubuntu-latest

steps:

- task: TerraformInstaller@1
  displayName: Terraform Install
  inputs:
    terraformVersion: '${{ parameters.TF_VERSION }}'

#- task: Bash@3
#  displayName: Echo Vars - Testing Task
#  inputs:
#    targetType: 'inline'
#    workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure'
#    # script: 'make terraform-init dir="infrastructure"'
#    script: |
#      echo ls
#      ls -l
#      echo $(ARM_SUBSCRIPTION_ID)
#      echo $(STATE_BLOB)

- task: AzureCLI@2
  displayName: Terraform Login
  inputs:
    azureSubscription: '${{ parameters.SERVICE_CONNECTION }}'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az account set -s "$(ARM_SUBSCRIPTION_ID)"
      echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId"
      echo "##vso[task.setvariable variable=ARM_OIDC_TOKEN]$idToken"
      echo "##vso[task.setvariable variable=ARM_USE_OIDC]true"
      echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subscriptionId"
      echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"
      echo $(STATE_BLOB)
    addSpnToEnvironment: true

#- task: AzureCLI@2
#   inputs:
#     azureSubscription: '${{ parameters.SERVICE_CONNECTION }}'
#     scriptType: 'bash'
#     scriptLocation: 'inlineScript'
#     workingDirectory: '$(System.DefaultWorkingDirectory)'
#     inlineScript: |
#       az account set -s $(az account show --query id -o tsv)
#       cd infrastructure
#       terraform init \
#       -backend-config="resource_group_name=$(STATE_RG)" \
#       -backend-config="storage_account_name=$(STATE_SA)" \
#       -backend-config="container_name=$(STATE_CONT)" \
#       -backend-config="key=$(STATE_BLOB)"
# #      make terraform-init dir="infrastructure" opts="--backend-config=environments/secrets/backend_config.template"



# - task: Bash@3
#   displayName: Terraform Plan
#   inputs:
#     targetType: 'inline'
#     script: 'make terraform-plan dir="infrastructure" opts="-var-file=infrastructure/environments/${{ parameters.environment }}.tfvars.config"'
#     workingDirectory: '$(System.DefaultWorkingDirectory)'

   
- task: TerraformTaskV4@4
  continueOnError: false
  displayName: Terraform Init
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '${{ parameters.TF_DIRECTORY }}' 
    backendAzureRmUseEnvironmentVariablesForAuthentication: false
    backendServiceArm: '${{ parameters.SERVICE_CONNECTION }}'
    backendAzureRmResourceGroupName: $(STATE_RG)
    backendAzureRmStorageAccountName: $(STATE_SA)
    backendAzureRmContainerName: $(STATE_CONT)
    backendAzureRmKey: $(STATE_BLOB)

- task: TerraformTaskV4@4
  continueOnError: false
  displayName: Terraform Validate
  inputs:
    provider: 'azurerm'
    command: 'validate'
    workingDirectory: '${{ parameters.TF_DIRECTORY }}' 

- task: TerraformTaskV4@4
  displayName: Terraform Plan - ${{ parameters.ENVIRONMENT }} Environment
  continueOnError: false
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '${{ parameters.TF_DIRECTORY }}'
    commandOptions: '-var-file=environments/${{ parameters.ENVIRONMENT }}.tfvars.config'
    environmentServiceNameAzureRM: '${{ parameters.SERVICE_CONNECTION }}'