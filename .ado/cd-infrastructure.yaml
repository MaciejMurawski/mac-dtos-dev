parameters:
  - name: ENVIRONMENT
    displayName: Environment
    type: string
    default: dev
  - name: PLAN_ONLY
    displayName: Execute plan-only
    type: boolean
    default: false
  
trigger: none

variables:
  - group: dtos_dev_variables
  - group: dtos_global
  - name: TF_DIRECTORY
    value: '$(System.DefaultWorkingDirectory)/infrastructure'
  - name: PLAN_HAS_CHANGES

pool:
  vmImage: ubuntu-latest

stages:
  - stage: terraform_plan
    displayName: Terraform Plan - ${{ parameters.ENVIRONMENT }}
    dependsOn: []
    jobs:
      - job: init_and_validate
        displayName: Terraform Init and Plan
        steps:
          
        - task: TerraformTaskV4@4
          continueOnError: false
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init' 
            workingDirectory: $(TF_DIRECTORY)
            backendAzureRmUseEnvironmentVariablesForAuthentication: false
            backendServiceArm: $(SERVICE_CONNECTION)
            backendAzureRmResourceGroupName: $(STATE_RG)
            backendAzureRmStorageAccountName: $(STATE_SA)
            backendAzureRmContainerName: $(STATE_CONT)
            backendAzureRmKey: $(STATE_BLOB)

        - task: TerraformTaskV4@4
          continueOnError: false
          displayName: Terraform Validate
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: $(TF_DIRECTORY)

        - task: TerraformTaskV4@4
          name: TerraformPlan
          displayName: Terraform Plan - ${{ parameters.ENVIRONMENT }} Environment
          continueOnError: false
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: $(TF_DIRECTORY)
            commandOptions: '-input=false -var-file=environments/${{ parameters.ENVIRONMENT }}.tfvars.config -out=$(Build.ArtifactStagingDirectory)/${{ parameters.ENVIRONMENT }}.tfplan'
            environmentServiceNameAzureRM: $(SERVICE_CONNECTION)

        - task: PublishBuildArtifacts@1
          displayName: "Publish Artifact"
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: $(TF_PLAN_ARTIFACT)
            publishLocation: 'Container'

  - stage: terraform_apply
    displayName: Terraform Apply - ${{ parameters.ENVIRONMENT }}
    dependsOn: [terraform_plan]
    condition: ${{ eq(parameters.PLAN_ONLY, false) }}
    #condition: and(succeeded(),eq(stageDependencies.terraform_plan.outputs['TerraformPlan.changesPresent'],'true'))
    #condition: and(succeeded(),${{ eq(parameters.PLAN_ONLY, false) }},eq(stageDependencies.terraform_plan.outputs['TerraformPlan.changesPresent'],'true'))
    
    jobs:
      - deployment: terraform_apply
        displayName: Terraform Apply - ${{ parameters.ENVIRONMENT }}
        environment: dtos_dev
        strategy:
         runOnce:
           deploy:
            steps:
              - checkout: self
                persistCredentials: true
              
                      
              - bash: |
                  echo "Var TerraformPlan"
                  $(stageDependencies.terraform_plan.outputs['TerraformPlan.changesPresent'])
              
              - task: DownloadBuildArtifacts@1
                displayName: Download plan
                inputs:
                  buildType: 'current'
                  downloadType: 'single'
                  artifactName: $(TF_PLAN_ARTIFACT)
                  downloadPath: $(TF_DIRECTORY)

              - task: TerraformTaskV4@4
                continueOnError: false
                displayName: Terraform Init
                inputs:
                  provider: 'azurerm'
                  command: 'init' 
                  workingDirectory: $(TF_DIRECTORY)
                  backendAzureRmUseEnvironmentVariablesForAuthentication: false
                  backendServiceArm: $(SERVICE_CONNECTION)
                  backendAzureRmResourceGroupName: $(STATE_RG)
                  backendAzureRmStorageAccountName: $(STATE_SA)
                  backendAzureRmContainerName: $(STATE_CONT)
                  backendAzureRmKey: $(STATE_BLOB)

              - task: TerraformTaskV4@4
                continueOnError: false
                displayName: Terraform Apply - ${{ parameters.ENVIRONMENT }}
                inputs:
                  provider: 'azurerm'
                  command: 'apply'
                  workingDirectory: $(TF_DIRECTORY)
                  commandOptions: "$(TF_PLAN_ARTIFACT)/${{ parameters.ENVIRONMENT }}.tfplan"
                  environmentServiceNameAzureRM: $(SERVICE_CONNECTION)